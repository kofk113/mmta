#!/bin/sh

SCRIPTS=./src
ALIST=""

# filterlist $PRED $LIST
# Filter out elements from a comma separated $LIST for which not $PRED elem
filterlist ()
{
    local PRED LIST A ALIST OUTLIST
    PRED=$1
    LIST=$2
    A=""
    ALIST=$LIST
    OUTLIST=""
    while [ "$A" != "$ALIST" ] ; do
        A=${ALIST%%,*}
        ALIST=${ALIST#*,}
        if $PRED $A ; then
            OUTLIST="$OUTLIST,$A"
        fi
    done
    OUTLIST=${OUTLIST#,}
    echo $OUTLIST
}

# Check if a given username is in /etc/passwd 
# and the users shell is in /etc/shells
check_username()
{
    local PWFILE USERSHELL
    PWFILE="./passwd"
    USERSHELL=`grep "^${1}:" ${PWFILE} | cut -d: -f7`
    [ -n "$USERSHELL" ] || return 1
    grep -v '^#' /etc/shells | grep -q $USERSHELL
    return $?
}


# contains $LIST $A
# returns 0 if $LIST contains $A
contains()
{
    local PLIST ITEM P
    PLIST=$1
    ITEM=$2
    P=""
    while [ "$PLIST" != "$P" ] ; do
        P=${PLIST%%,*}
        PLIST=${PLIST#*,}
        if [ "$ITEM" = "$P" ] ; then
            return 0
        fi
    done
    return 1
}

get_aliases()
{
    local UNAME AFILE
    UNAME=$1
    AFILE=./aliases
    grep -v '^#' $AFILE | sed -n "
/^$UNAME:/ {
    s/\\\\$// ; h ; t sawslash
    :loop
    n
    s/^\S// ; t exit
    s/\\\\$// ; H ; $ b exit
    t sawslash
    b loop
    :sawslash
    n
    s/\\\\$// ; H ; $ b exit
    t sawslash
    b loop
    :exit
    x
    s/\n//g
    s/$UNAME:\s*//
    s/\s*,\s*/,/g
    s/,$//
    p
}"
    return 1
}


resolve_aliases()
{
    local USER PROCESSED A ALIST
    USER=$1
    PROCESSED=$1
    AL_LOCLIST=""
    AL_INETLIST=""
    AL_PIPELIST=""
    AL_FILELIST=""
    AL_INCLIST=""

    ALIST=$(get_aliases $USER)
    A=""
    while [ "$A" != "$ALIST" ] ; do
        A=${ALIST%%,*}
        ALIST=${ALIST#*,}
        if contains $PROCESSED $A ; then
            echo "Warning: aliases file contains a loop with user $A" 1>&2
            continue
        fi
        case "$A" in
            /*) # Filename
                AL_FILELIST="$AL_FILELIST,$A" ;;
            \|*) # Pipe
                AL_PIPELIST="$AL_PIPELIST,$A" ;;
            :*) # Include file
                AL_INCLIST="$AL_INCLIST,$A" ;;
            *@*) # Inet mailaddress
                AL_INETLIST="$AL_INETLIST,$A" ;;
            *) # Local address?
                LIST=$(get_aliases $A)
                if [ -n "$LIST" ] ; then
                    ALIST="$LIST,$ALIST"
                    PROCESSED="$PROCESSED,$A"
                else
                    AL_LOCLIST="$AL_LOCLIST,$A"
                fi ;;
        esac
    done
    AL_LOCLIST=${AL_LOCLIST#,}
    AL_INETLIST=${AL_INETLIST#,}
    AL_PIPELIST=${AL_PIPELIST#,}
    AL_FILELIST=${AL_FILELIST#,}
    AL_INCLIST=${AL_INCLIST#,}
#        echo "AL_LOCLIST: $AL_LOCLIST"
#        echo "AL_INETLIST: $AL_INETLIST"
#        echo "AL_PIPELIST: $AL_PIPELIST"
#        echo "AL_FILELIST: $AL_FILELIST"
#        echo "AL_INCLIST: $AL_INCLIST"
    if [ -z "$AL_LOCLIST" ] ; then
        AL_LOCLIST=$USER
    fi
    echo "$AL_LOCLIST"
    return 1
}

echo "Allparams: $@"

#filterlist check_username "tpikonen,jorma,root,mythtv,daniel,keimo,kaino"
#echo $?
#exit 1

#resolve_aliases root
#exit 0

# Mail errors to sender by default
MAIL_ERRORS=1
# Don't deliver to sender, if the sender address is found after alias expansion
SEND_TO_SELF=0
FIRSTREC=""
while PAR="$1"; shift ; do
    case $PAR in 
        # sendmail options defined in LSB:
        -bm) # Read msg from stdin, default
            ;;
        -bp) # list mail-queue info,
             # maybe implement this with in external mailer helper script?
            ;;
        -bs) # Read and write raw SMTP protocol, unsupported
            exit 1
            ;;
        -F*) # Set the full name of the sender
            # not implemented yet
            ;;
        -f*) # Set the from address (if msg does not contain From: -field)
            # not implemented yet
            ;;
        -i|-oi) # Don't terminate reading input after a line with a single dot
            # not implemented yet
            ;;
        -odb) # Deliver mail in background, ignored
            ;;
        -odf) # Deliver mail in foreground, default for local delivery,
              # otherwise ignored
            ;;
        -oem|-em) # Mail errors back to sender, default
            MAIL_ERRORS=1 ;;
        -oep|-ep) # Write errors to stderr
            MAIL_ERRORS=0 ;;
        -om) # Mail a copy to sender if sender appears in alias expansion
            SEND_TO_SELF=1 ;;
        -t) # Parse To:, Cc: and Bcc: header from msg to obtain recipients
            exit 1 # unsupported
            ;;
        --) # Start parsing recipients
            FIRSTREC="$1"
            shift
            break 2 ;;
        -*)
            echo "Warning: Ignoring unknown parameter $PAR" 1>&2 ;;
        *) # Already at first recipient
            FIRSTREC=$PAR
            break 2 ;;
    esac
done

RECIPIENTS="$FIRSTREC"
while PAR="$1"; shift ; do
    RECIPIENTS="$RECIPIENTS,$PAR"
done

ALIST=$RECIPIENTS
A=""
INET_RECV=""
LOC_RECV=""
HOSTNAME=$(hostname)
while [ "$A" != "$ALIST" ] ; do
    A=${ALIST%%,*}
    ALIST=${ALIST#*,}
    R=${A%%@localhost*}
    R=${R%%@$HOSTNAME}
    case $R in 
        *@*)
            INET_RECV="$INET_RECV,$R" ;;
        *)
            resolve_aliases $R
            LOC_RECV="$LOC_RECV,$AL_LOCLIST" ;;
    esac
done
# Remove dups, check if local usernames are valid
INET_RECV=$(echo ${INET_RECV#,} | tr ',' '\n' | sort | uniq | tr '\n' ',')
LOC_RECV=$(echo ${LOC_RECV#,} | tr ',' '\n' | sort | uniq | tr '\n' ',')
LOC_RECV=$(filterlist check_username ${LOC_RECV})

echo "INET_RECV: $INET_RECV"
echo "LOC_RECV: $LOC_RECV"

TEMPF=`tempfile`
if [ "$?" != "0" ] ; then 
    echo "Could not create a temporary file"
    return 1
fi

SENDER=`whoami`
DATE=`date`
echo "From $SENDER $DATE" > $TEMPF
cat >> $TEMPF
# From_ quoting, is it necessary?
#sed 's/^\(>*From \)/>\1/' >> $TEMPF
echo >> $TEMPF

cat $TEMPF

# Should do delivery of supplied inet addresses first
echo "/// Starting delivery ///"
# Local delivery
echo "|${LOC_RECV}|" 
LOCAL_SENT=""
ALIST=$LOC_RECV
A=""
while [ "$A" != "$ALIST" ]; do 
    A=${ALIST%%,*} 
    ALIST=${ALIST#*,} 
    echo $A
    if contains $LOCAL_SENT $A ; then
        continue
    fi
    $SCRIPTS/mmda $A cat-forward > /devnull 
    if [ $? -ne 0 ] ; then
        cat $TEMPF | $SCRIPTS/mmda $A mbox
        LOCAL_SENT="$LOCAL_SENT,$A"
        continue
    fi
    INDEX=1
    $SCRIPTS/mmda $A cat-forward | {
        INET_FWDS=""
        while read LINE ; do
            if echo $LINE | grep -q '^#' ; then
                continue
            elif echo $LINE | grep -q '^\s*/' ; then
                $SCRIPTS/mmda $A run-forward $INDEX
            elif echo $LINE | grep -q '^\s*["\']{,1}|' ; then
                $SCRIPTS/mmda $A run-forward $INDEX
            elif echo $LINE | grep -q "^\s*\\$A" ; then
                cat $TEMPF | $SCRIPTS/mmda $A mbox
                LOCAL_SENT="$LOCAL_SENT,$A"
            elif echo $LINE | grep -q '^\s*\S\S*@\S\S*' ; then
                IADDRESS=$(echo $LINE | sed 's/^\s*\(\S\S*@\S\S*\).*/\1/')
                INET_FWDS="$INET_FWDS,$IADDRESS"
            else # if no match, assume local user account
                MAYBE_USER=$(echo $LINE | sed 's/^\s*\(\S\S*\).*/\1/')
                if check_username $MAYBE_USER ; then
                    ALIST="$ALIST,$MAYBE_USER"
                fi
            fi
            INDEX=$(expr $INDEX + 1)
        done
        # if sender can send inet-mail, put INET_FWDS to his mailq,
        # otherwise try to use receiving users mailq
    }
done

echo "sent to: $LOCAL_SENT"
echo "inet to: $LOCAL_SENT"
rm -f $TEMPF
