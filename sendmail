#!/bin/sh
# mmta, a minimal mail transport agent
# Copyright: 2008 Teemu Ikonen <tpikonen@gmail.com>
# License: GPLv3+

SCRIPTS="/home/tpikonen/mailscript/git-mailscript/msmtp"
MMDA="/home/tpikonen/mailscript/git-mailscript/mmda"
PWFILE="/etc/passwd"
ALIASFILE="./aliases"
CONFFILE="/home/tpikonen/mailscript/git-mailscript/mmtarc"

ALIST=""

# Routines for handling comma-separated lists

# append $LIST $A
# append $A to $LIST
append ()
{
    if [ -z "$1" ] ; then
        echo "$2"
    else
        echo "$1,$2"
    fi
}


# cdr $LIST
# Get the tail part of $LIST, or empty string if list has one element
cdr ()
{
    echo "$1" | sed 's/^[^,]*,*\(.*\)/\1/'
}


# contains $LIST $A
# returns 0 if $LIST contains $A
contains()
{
    local PLIST ITEM P
    PLIST="$1"
    ITEM="$2"
    P=""
    while [ "$PLIST" != "$P" ] ; do
        P=${PLIST%%,*}
        PLIST=${PLIST#*,}
        if [ "$ITEM" = "$P" ] ; then
            return 0
        fi
    done
    return 1
}


# filterlist $PRED $LIST
# Filter out elements from a comma separated $LIST for which not $PRED elem
filterlist ()
{
    local PRED LIST A ALIST OUTLIST
    PRED="$1"
    LIST="$2"
    A=""
    ALIST="$LIST"
    OUTLIST=""
    while [ "$A" != "$ALIST" ] ; do
        A=${ALIST%%,*}
        ALIST=${ALIST#*,}
        if $PRED $A ; then
            OUTLIST=$(append "$OUTLIST" "$A")
        fi
    done
    echo $OUTLIST
}


# Other functions

# Check if a given username is in /etc/passwd 
# and the users shell is in /etc/shells
check_username()
{
    local USERSHELL
    USERSHELL=`grep "^${1}:" ${PWFILE} | cut -d: -f7`
    [ -n "$USERSHELL" ] || return 1
    grep -v '^#' /etc/shells | grep -q $USERSHELL
    return $?
}

# get_aliases $UNAME
# echo the logical line after $UNAME: in $ALIASFILE
get_aliases()
{
    local UNAME
    UNAME=$1
    grep -v '^#' $ALIASFILE | sed -n "
/^$UNAME:/ {
    s/\\\\$// ; h ; t sawslash
    :loop
    $ b exit
    n
    s/^\S// ; t exit
    s/\\\\$// ; H ; $ b exit
    t sawslash
    b loop
    :sawslash
    n
    s/\\\\$// ; H ; $ b exit
    t sawslash
    b loop
    :exit
    x
    s/\n//g
    s/$UNAME:\s*//
    s/\s*,\s*/,/g
    s/,$//
    p
}"
    return 1
}

# resolve_aliases $USER
# Recursively alias-expand $USER. Output in global vars AL_LOCLIST, etc.
resolve_aliases()
{
    local USER PROCESSED A ALIST
    USER=$1
    PROCESSED=$1
    AL_LOCLIST=""
    AL_INETLIST=""
    AL_PIPELIST=""
    AL_FILELIST=""
    AL_INCLIST=""

    ALIST=$(get_aliases $USER)
    A=""
    while [ -n "$ALIST" ] ; do
        A=${ALIST%%,*}
        ALIST=$(cdr "$ALIST")
        if contains "$PROCESSED" "$A" ; then
            echo "Warning: aliases file contains a loop with user $A" 1>&2
            continue
        fi
        case "$A" in
            /*) # Filename
                AL_FILELIST=$(append "$AL_FILELIST" "$A") ;;
            \|*) # Pipe
                AL_PIPELIST=$(append "$AL_PIPELIST" "$A" ;;
            :*) # Include file
                AL_INCLIST=$(append "$AL_INCLIST" "$A") ;;
            *@*) # Inet mailaddress
                AL_INETLIST=$(append "$AL_INETLIST" "$A") ;;
            *) # Local address?
                LIST=$(get_aliases $A)
                if [ -n "$LIST" ] ; then
                    ALIST=$(append "$ALIST" "$LIST")
                    PROCESSED=$(append "$PROCESSED" "$A")
                else
                    AL_LOCLIST=$(append "$AL_LOCLIST" "$A")
                fi ;;
        esac
    done
#    AL_LOCLIST=${AL_LOCLIST#,}
#    AL_INETLIST=${AL_INETLIST#,}
#    AL_PIPELIST=${AL_PIPELIST#,}
#    AL_FILELIST=${AL_FILELIST#,}
#    AL_INCLIST=${AL_INCLIST#,}
#        echo "AL_LOCLIST: $AL_LOCLIST"
#        echo "AL_INETLIST: $AL_INETLIST"
#        echo "AL_PIPELIST: $AL_PIPELIST"
#        echo "AL_FILELIST: $AL_FILELIST"
#        echo "AL_INCLIST: $AL_INCLIST"
    if [ -z "$AL_LOCLIST" ] ; then
        AL_LOCLIST=$USER
    fi
#    echo "$AL_LOCLIST"
    return 1
}


# Mail errors to sender by default
MAIL_ERRORS=1
FIRSTREC=""
while PAR="$1"; shift ; do
    case $PAR in 
        # sendmail options defined in LSB:
        -bm) # Read msg from stdin, default
            ;;
        -bp) # list mail-queue info,
             # maybe implement this with in external mailer helper script?
            ;;
        -bs) # Read and write raw SMTP protocol, unsupported
            exit 1
            ;;
        -F*) # Set the full name of the sender
            # not implemented yet
            ;;
        -f*) # Set the from address (if msg does not contain From: -field)
            # not implemented yet
            ;;
        -i|-oi) # Don't terminate reading input after a line with a single dot
            # not implemented yet
            ;;
        -odb) # Deliver mail in background, ignored
            ;;
        -odf) # Deliver mail in foreground, default for local delivery,
              # otherwise ignored
            ;;
        -oem|-em) # Mail errors back to sender, default
            MAIL_ERRORS=1 ;;
        -oep|-ep) # Write errors to stderr
            MAIL_ERRORS=0 ;;
        -om) # Mail a copy to sender if sender appears in alias expansion
            SEND_TO_SELF=1 ;;
        -t) # Parse To:, Cc: and Bcc: header from msg to obtain recipients
            exit 1 # unsupported
            ;;
        --) # Start parsing recipients
            FIRSTREC="$1"
            shift
            break 2 ;;
        -*)
            echo "Warning: Ignoring unknown parameter $PAR" 1>&2 ;;
        *) # Already at first recipient
            FIRSTREC=$PAR
            break 2 ;;
    esac
done

RECIPIENTS="$FIRSTREC"
while PAR="$1"; shift ; do
    RECIPIENTS="$RECIPIENTS,$PAR"
done

#ALIST=$RECIPIENTS
#A=""
#INET_RECV=""
#LOC_RECV=""
#HOSTNAME=$(hostname)
#while [ "$A" "$ALIST" ] ; do
#    A=${ALIST%%,*}
#    ALIST=${ALIST#*,}
#    R=${A%%@localhost*}
#    R=${R%%@$HOSTNAME}
#    case $R in 
#        *@*)
#            INET_RECV=$(append "$INET_RECV" "$R") ;;
#        *)
#            resolve_aliases $R
#            LOC_RECV=$(append "$LOC_RECV" "$AL_LOCLIST") ;;
#    esac
#done
## Remove dups, check if local usernames are valid
#INET_RECV=$(echo -n ${INET_RECV#,} | tr ',' '\n' | sort | uniq | tr '\n' ',')
#INET_RECV=${INET_RECV#,}
#INET_RECV=${INET_RECV%%,}
#LOC_RECV=$(echo ${LOC_RECV#,} | tr ',' '\n' | sort | uniq | tr '\n' ',')
#LOC_RECV=$(filterlist check_username ${LOC_RECV})

#echo "INET_RECV: $INET_RECV"
#echo "LOC_RECV: $LOC_RECV"

TEMPF=`tempfile`
if [ "$?" != "0" ] ; then 
    echo "Could not create a temporary file"
    return 1
fi

#SENDER=`whoami`
#DATE=`date`
#echo "From $SENDER $DATE" > $TEMPF

cat >> $TEMPF
## From_ quoting, is it necessary?
##sed 's/^\(>*From \)/>\1/' >> $TEMPF
#echo >> $TEMPF
#
#echo $TEMPF
#cat $TEMPF

#exit 0


. $CONFFILE

$CANSEND
SEND_INET=$?
if [ $SEND_INET = "0" ] ; then
    MARG="deliver"
else
    MARG="forward"
fi

#echo "MARG: $MARG"

# Local delivery loop
LOCAL_SENT=""
INET_RECV=""
FORWARDERS=""
ALIST=$RECIPIENTS
while [ -n "$ALIST" ]; do 
    A=${ALIST%%,*} 
    ALIST=$(cdr "$ALIST")
#    echo "A1: $A"
#    echo "ALIST1: $ALIST"
    R=${A%%@localhost*}
    R=${R%%@$HOSTNAME}
    case $R in
        *@*)
            INET_RECV=$(append "$INET_RECV" "$R")
            continue ;;
        *)
            resolve_aliases $R
            if [ "$R" != "$AL_LOCLIST" ] ; then 
                ALIST=$(append "$AL_LOCLIST" "$ALIST")
                continue
            fi ;;
    esac
    if check_username "$R" ; then
        true
    else
        continue
    fi
    if contains "$LOCAL_SENT" "$R" ; then
        continue
    fi
#    echo "sending: $R"
    FLIST=$(cat $TEMPF | $MMDA $MARG $R | sed -n '1h;1!H;${;g;s/\n/,/g;p;}')
#    echo "FLIST: $FLIST"
    ALIST=$(append "$FLIST" "$ALIST")
    LOCAL_SENT=$(append "$LOCAL_SENT" "$R")
    if [ "$SEND_INET" != "0" ] ; then
        FORWARDERS=$(append "$FORWARDERS" "$R")
    fi
done

#echo "INET_RECV: $INET_RECV"
#echo "FORWARDERS: $FORWARDERS"

#FIXME: Check if we're online?

# Do internet delivery
if [ $SEND_INET = "0" ] ; then
    QARGS=$(echo $INET_RECV | sed 's/, / /g')
#    echo $QARGS
#    cat $TEMPF | $QUEUEMAIL $QARGS
#    $SENDQUEUE
else
    if [ -n "$INET_RECV" ] ; then
        echo "Warning: Could not send to following external addresses:" >&2
        echo "$INET_RECV" | tr ',' '\n' >&2  
    fi
    # Run outgoing queues from people who were sent mail
#    ALIST=$FORWARDERS
#    while [ -n "$FORWARDERS" ] ; do
#        A=${ALIST%%,*} 
#        ALIST=$(cdr "$ALIST")
#        $MMDA send $A &        
#    done
fi

#echo "sent to: $LOCAL_SENT"
#echo "inet to: $INET_RECV"
rm -f $TEMPF

#read

exit 0
